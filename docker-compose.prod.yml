# Docker Compose para Produção - Mundo em Palavras
# Configurações otimizadas para ambiente de produção
# Sem hot reload e com configurações de segurança

services:
  # ===========================================
  # BANCOS DE DADOS
  # ===========================================
  
  postgres-users:
    image: postgres:15-alpine
    container_name: mundo-palavras-postgres-users-prod
    environment:
      POSTGRES_DB: mundo_palavras_users
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${POSTGRES_USERS_PASSWORD}
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
      - ./backend/databases/postgres_users/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mundo-palavras-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  postgres-catalog:
    image: postgres:15-alpine
    container_name: mundo-palavras-postgres-catalog-prod
    environment:
      POSTGRES_DB: mundo_palavras_catalog
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${POSTGRES_CATALOG_PASSWORD}
    volumes:
      - postgres_catalog_data:/var/lib/postgresql/data
      - ./backend/databases/postgres_catalog/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mundo-palavras-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  postgres-cart:
    image: postgres:15-alpine
    container_name: mundo-palavras-postgres-cart-prod
    environment:
      POSTGRES_DB: mundo_palavras_cart
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${POSTGRES_CART_PASSWORD}
    volumes:
      - postgres_cart_data:/var/lib/postgresql/data
      - ./backend/databases/postgres_cart/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mundo-palavras-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  postgres-orders:
    image: postgres:15-alpine
    container_name: mundo-palavras-postgres-orders-prod
    environment:
      POSTGRES_DB: mundo_palavras_orders
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${POSTGRES_ORDERS_PASSWORD}
    volumes:
      - postgres_orders_data:/var/lib/postgresql/data
      - ./backend/databases/postgres_orders/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mundo-palavras-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  postgres-payments:
    image: postgres:15-alpine
    container_name: mundo-palavras-postgres-payments-prod
    environment:
      POSTGRES_DB: mundo_palavras_payments
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${POSTGRES_PAYMENTS_PASSWORD}
    volumes:
      - postgres_payments_data:/var/lib/postgresql/data
      - ./backend/databases/postgres_payments/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mundo-palavras-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  redis:
    image: redis:7-alpine
    container_name: mundo-palavras-redis-prod
    volumes:
      - redis_data:/data
      - ./backend/databases/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    networks:
      - mundo-palavras-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ===========================================
  # MICROSERVIÇOS FASTAPI
  # ===========================================

  auth-service:
    build:
      context: ./backend/microservices/auth_service
      dockerfile: Dockerfile
    container_name: mundo-palavras-auth-service-prod
    environment:
      - DATABASE_URL=postgresql://admin:${POSTGRES_USERS_PASSWORD}@postgres-users:5432/mundo_palavras_users
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
    networks:
      - mundo-palavras-network
    restart: always
    depends_on:
      - postgres-users
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  catalog-service:
    build:
      context: ./backend/microservices/catalog_service
      dockerfile: Dockerfile
    container_name: mundo-palavras-catalog-service-prod
    environment:
      - DATABASE_URL=postgresql://admin:${POSTGRES_CATALOG_PASSWORD}@postgres-catalog:5432/mundo_palavras_catalog
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
    networks:
      - mundo-palavras-network
    restart: always
    depends_on:
      - postgres-catalog
      - redis
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  cart-service:
    build:
      context: ./backend/microservices/cart_service
      dockerfile: Dockerfile
    container_name: mundo-palavras-cart-service-prod
    environment:
      - DATABASE_URL=postgresql://admin:${POSTGRES_CART_PASSWORD}@postgres-cart:5432/mundo_palavras_cart
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
    networks:
      - mundo-palavras-network
    restart: always
    depends_on:
      - postgres-cart
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  shipping-service:
    build:
      context: ./backend/microservices/shipping_service
      dockerfile: Dockerfile
    container_name: mundo-palavras-shipping-service-prod
    environment:
      - CORREIOS_API_URL=${CORREIOS_API_URL}
      - CORREIOS_API_KEY=${CORREIOS_API_KEY}
    networks:
      - mundo-palavras-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  payment-service:
    build:
      context: ./backend/microservices/payment_service
      dockerfile: Dockerfile
    container_name: mundo-palavras-payment-service-prod
    environment:
      - DATABASE_URL=postgresql://admin:${POSTGRES_PAYMENTS_PASSWORD}@postgres-payments:5432/mundo_palavras_payments
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PAYMENT_GATEWAY_URL=${PAYMENT_GATEWAY_URL}
    networks:
      - mundo-palavras-network
    restart: always
    depends_on:
      - postgres-payments
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  order-service:
    build:
      context: ./backend/microservices/order_service
      dockerfile: Dockerfile
    container_name: mundo-palavras-order-service-prod
    environment:
      - DATABASE_URL=postgresql://admin:${POSTGRES_ORDERS_PASSWORD}@postgres-orders:5432/mundo_palavras_orders
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/3
    networks:
      - mundo-palavras-network
    restart: always
    depends_on:
      - postgres-orders
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  recommendation-service:
    build:
      context: ./backend/microservices/recommendation_service
      dockerfile: Dockerfile
    container_name: mundo-palavras-recommendation-service-prod
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/4
    networks:
      - mundo-palavras-network
    restart: always
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ===========================================
  # API GATEWAY
  # ===========================================

  api-gateway:
    image: nginx:alpine
    container_name: mundo-palavras-api-gateway-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend/api_gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - auth-service
      - catalog-service
      - cart-service
      - shipping-service
      - payment-service
      - order-service
      - recommendation-service
    networks:
      - mundo-palavras-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ===========================================
  # FRONTEND
  # ===========================================

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mundo-palavras-frontend-prod
    environment:
      - REACT_APP_API_URL=${API_GATEWAY_URL}
    networks:
      - mundo-palavras-network
    restart: always
    depends_on:
      - api-gateway
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

# ===========================================
# VOLUMES
# ===========================================
volumes:
  postgres_users_data:
    driver: local
  postgres_catalog_data:
    driver: local
  postgres_cart_data:
    driver: local
  postgres_orders_data:
    driver: local
  postgres_payments_data:
    driver: local
  redis_data:
    driver: local

# ===========================================
# NETWORKS
# ===========================================
networks:
  mundo-palavras-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
