#!/bin/bash

# Script de Setup - Mundo em Palavras
# Configura√ß√£o inicial do ambiente de desenvolvimento
# Instala depend√™ncias e inicia os servi√ßos

echo "üöÄ Configurando Mundo em Palavras - E-commerce de Livros"
echo "=================================================="

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
    exit 1
fi

# Verificar se Docker est√° rodando
echo "üîç Verificando se Docker est√° rodando..."
if ! docker info >/dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando!"
    echo "üí° Por favor, inicie o Docker Desktop e tente novamente."
    echo "üí° Aguarde alguns segundos ap√≥s iniciar o Docker Desktop."
    exit 1
fi

# Verificar se Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
    exit 1
fi

# Verificar se Python est√° instalado
if ! command -v python &> /dev/null; then
    echo "‚ùå Python n√£o est√° instalado. Por favor, instale o Python 3.9+ primeiro."
    exit 1
fi

# Verificar se pip est√° instalado
if ! command -v pip &> /dev/null; then
    echo "‚ùå pip n√£o est√° instalado. Por favor, instale o pip primeiro."
    exit 1
fi

echo "‚úÖ Docker e Docker Compose encontrados"
echo "‚úÖ Python encontrado"

# Verificar Node.js (opcional)
if command -v npm &> /dev/null; then
    echo "‚úÖ Node.js encontrado"
else
    echo "‚ö†Ô∏è  Node.js n√£o encontrado - frontend ser√° executado via Docker"
fi

# Criar diret√≥rios necess√°rios
echo "üìÅ Criando diret√≥rios necess√°rios..."
mkdir -p logs
mkdir -p backend/data/postgres_users
mkdir -p backend/data/postgres_catalog
mkdir -p backend/data/postgres_cart
mkdir -p backend/data/postgres_orders
mkdir -p backend/data/postgres_payments
mkdir -p backend/data/redis

# Definir permiss√µes
chmod 755 backend/data/postgres_*
chmod 755 backend/data/redis

echo "‚úÖ Diret√≥rios criados com sucesso"

# Criar/recriar ambiente virtual Python
echo "üêç Configurando ambiente virtual Python..."
if [ -d ".venv" ]; then
    echo "üóëÔ∏è  Removendo ambiente virtual existente..."
    rm -rf .venv
fi

echo "üÜï Criando novo ambiente virtual..."
python -m venv .venv

if [ $? -eq 0 ]; then
    echo "‚úÖ Ambiente virtual criado com sucesso"
else
    echo "‚ùå Erro ao criar ambiente virtual"
    exit 1
fi

# Ativar ambiente virtual
echo "üîÑ Ativando ambiente virtual..."

# Detectar sistema operacional e ativar ambiente virtual
if [ -f ".venv/Scripts/activate" ]; then
    # Windows (Git Bash)
    echo "ü™ü Detectado Windows - ativando ambiente virtual..."
    source .venv/Scripts/activate
elif [ -f ".venv/bin/activate" ]; then
    # Linux/Mac
    echo "üêß Detectado Linux/Mac - ativando ambiente virtual..."
    source .venv/bin/activate
else
    echo "‚ùå Arquivo de ativa√ß√£o do ambiente virtual n√£o encontrado"
    echo "‚ö†Ô∏è  Continuando sem ativar o ambiente virtual..."
    echo "üí° Para ativar manualmente no Windows: .venv\\Scripts\\activate"
    echo "üí° Para ativar manualmente no Linux/Mac: source .venv/bin/activate"
fi

if [ $? -eq 0 ]; then
    echo "‚úÖ Ambiente virtual ativado"
else
    echo "‚ö†Ô∏è  Ambiente virtual n√£o foi ativado, mas continuando..."
fi

# Criar arquivo .env
echo "‚öôÔ∏è  Configurando arquivo .env..."
if [ -f ".env" ]; then
    echo "üìã Arquivo .env j√° existe, mantendo configura√ß√µes existentes"
else
    if [ -f "env.example" ]; then
        cp env.example .env
        echo "‚úÖ Arquivo .env criado a partir do env.example"
        echo "‚ö†Ô∏è  Lembre-se de ajustar as configura√ß√µes no arquivo .env conforme necess√°rio"
    else
        echo "‚ùå Arquivo env.example n√£o encontrado"
        exit 1
    fi
fi

# Instalar depend√™ncias do frontend (inclui devDependencies como TypeScript e @types/*)
echo "üì¶ Instalando depend√™ncias do frontend (frontend/app)..."
if command -v npm >/dev/null 2>&1; then
    cd frontend/app || { echo "‚ùå Diret√≥rio frontend/app n√£o encontrado"; cd - > /dev/null; }
    if [ -f "package.json" ]; then
        # prefer deterministic install when lockfile exists
        if [ -f "package-lock.json" ] || [ -f "npm-shrinkwrap.json" ]; then
            echo "‚û°Ô∏è  Executando: npm ci"
            npm ci --unsafe-perm
            rc=$?
        else
            echo "‚û°Ô∏è  Executando: npm install"
            npm install --unsafe-perm
            rc=$?
        fi

        if [ $rc -eq 0 ]; then
            echo "‚úÖ Depend√™ncias do frontend instaladas com sucesso"
            # Run a quick TypeScript build check so devDependencies (typescript, @types/...) are validated
            if command -v npx >/dev/null 2>&1; then
                echo "üß™ Executando checagem TypeScript (npx tsc -b)..."
                npx tsc -b --pretty || echo "‚ö†Ô∏è  Checagem TypeScript retornou erro, mas continuando"
            fi
        else
            echo "‚ùå Erro ao instalar depend√™ncias do frontend (exit code $rc)"
            echo "‚ö†Ô∏è  Continuando sem as depend√™ncias do frontend..."
        fi
    else
        echo "‚ö†Ô∏è  package.json n√£o encontrado em frontend/app"
    fi
    cd - > /dev/null
else
    echo "‚ö†Ô∏è  npm n√£o encontrado - pulando instala√ß√£o do frontend"
    echo "üí° Para instalar Node.js: https://nodejs.org/"
    echo "üí° Ou use Docker para executar o frontend"
fi

# Instalar depend√™ncias Python globais
echo "üêç Instalando depend√™ncias Python globais..."
if [ -f "backend/pyproject.toml" ]; then
    cd backend
    # Instalar depend√™ncias diretamente do pyproject.toml
    pip install fastapi uvicorn sqlalchemy psycopg2-binary redis python-jose[cryptography] passlib[bcrypt] pydantic python-multipart python-dotenv requests numpy scikit-learn pandas pillow stripe xmltodict zeep
    if [ $? -eq 0 ]; then
        echo "‚úÖ Depend√™ncias Python globais instaladas com sucesso"
    else
        echo "‚ùå Erro ao instalar depend√™ncias Python globais"
        echo "‚ö†Ô∏è  Continuando sem as depend√™ncias globais..."
    fi
    cd ..
else
    echo "‚ö†Ô∏è  pyproject.toml n√£o encontrado no backend"
fi

# Instalar depend√™ncias dos microservi√ßos individualmente
echo "üêç Instalando depend√™ncias dos microservi√ßos Python..."
for service in backend/microservices/*/; do
    if [ -f "$service/pyproject.toml" ]; then
        echo "üì¶ Instalando depend√™ncias em $(basename $service)..."
        cd "$service"
        # Instalar depend√™ncias b√°sicas do FastAPI
        pip install fastapi uvicorn sqlalchemy psycopg2-binary redis pydantic python-multipart python-dotenv
        if [ $? -eq 0 ]; then
            echo "‚úÖ Depend√™ncias de $(basename $service) instaladas"
        else
            echo "‚ùå Erro ao instalar depend√™ncias de $(basename $service)"
        fi
        cd - > /dev/null
    fi
done

# Desativar ambiente virtual (opcional, pois o Docker usar√° suas pr√≥prias depend√™ncias)
echo "üîÑ Desativando ambiente virtual..."
if command -v deactivate >/dev/null 2>&1; then
    deactivate
    echo "‚úÖ Ambiente virtual desativado"
else
    echo "‚ö†Ô∏è  Ambiente virtual n√£o estava ativado"
fi

# Construir imagens Docker
echo "üî® Construindo imagens Docker..."

# Verificar novamente se Docker est√° rodando antes de construir
if ! docker info >/dev/null 2>&1; then
    echo "‚ùå Docker parou de funcionar durante a execu√ß√£o!"
    echo "üí° Por favor, inicie o Docker Desktop e execute novamente:"
    echo "   docker-compose build"
    echo "   docker-compose up -d"
    exit 1
fi

docker-compose build

if [ $? -eq 0 ]; then
    echo "‚úÖ Imagens constru√≠das com sucesso"
else
    echo "‚ùå Erro ao construir imagens Docker"
    echo "üí° Verifique se o Docker Desktop est√° rodando"
    echo "üí° Tente executar manualmente: docker-compose build"
    exit 1
fi

# Iniciar servi√ßos
echo "üöÄ Iniciando servi√ßos..."
docker-compose up -d

if [ $? -eq 0 ]; then
    echo "‚úÖ Servi√ßos iniciados com sucesso"
else
    echo "‚ùå Erro ao iniciar servi√ßos"
    exit 1
fi

# Aguardar servi√ßos ficarem prontos
echo "‚è≥ Aguardando servi√ßos ficarem prontos..."
sleep 30

# Verificar status dos servi√ßos
echo "üîç Verificando status dos servi√ßos..."
docker-compose ps

echo ""
echo "üéâ Setup conclu√≠do com sucesso!"
echo ""
echo "üê≥ Imagens Docker utilizadas:"
echo "   ‚Ä¢ postgres:15-alpine (5 inst√¢ncias para bancos de dados)"
echo "   ‚Ä¢ redis:7-alpine (cache compartilhado)"
echo "   ‚Ä¢ nginx:alpine (API Gateway)"
echo "   ‚Ä¢ python:3.11-slim (7 microservi√ßos FastAPI)"
echo "   ‚Ä¢ node:18-alpine (frontend ReactJS)"
echo ""
echo "üìã Servi√ßos dispon√≠veis:"
echo "   ‚Ä¢ Frontend: http://localhost:3000"
echo "   ‚Ä¢ API Gateway: http://localhost:8080"
echo "   ‚Ä¢ Auth Service: http://localhost:8001"
echo "   ‚Ä¢ Catalog Service: http://localhost:8002"
echo "   ‚Ä¢ Cart Service: http://localhost:8003"
echo "   ‚Ä¢ Shipping Service: http://localhost:8004"
echo "   ‚Ä¢ Payment Service: http://localhost:8005"
echo "   ‚Ä¢ Order Service: http://localhost:8006"
echo "   ‚Ä¢ Recommendation Service: http://localhost:8007"
echo ""
echo "üóÑÔ∏è Bancos de dados:"
echo "   ‚Ä¢ PostgreSQL Users: localhost:5432"
echo "   ‚Ä¢ PostgreSQL Catalog: localhost:5433"
echo "   ‚Ä¢ PostgreSQL Cart: localhost:5434"
echo "   ‚Ä¢ PostgreSQL Orders: localhost:5435"
echo "   ‚Ä¢ PostgreSQL Payments: localhost:5436"
echo "   ‚Ä¢ Redis Cache: localhost:6379"
echo ""
echo "üìö Comandos √∫teis:"
echo "   ‚Ä¢ Parar servi√ßos: docker-compose down"
echo "   ‚Ä¢ Ver logs: docker-compose logs -f [servi√ßo]"
echo "   ‚Ä¢ Produ√ß√£o: docker-compose -f docker-compose.prod.yml up -d"
echo "   ‚Ä¢ Rebuild: docker-compose build --no-cache"
echo ""
echo "üîê Credenciais padr√£o dos bancos:"
echo "   ‚Ä¢ Usu√°rio: admin"
echo "   ‚Ä¢ Senha: admin1234"
echo ""
echo "üåê Acesse o sistema em: http://localhost:3000"
echo ""
echo "üìù Notas importantes:"
echo "   ‚Ä¢ Se o Node.js n√£o estiver instalado, o frontend ser√° executado via Docker"
echo "   ‚Ä¢ Para desenvolvimento local do frontend, instale Node.js: https://nodejs.org/"
echo "   ‚Ä¢ Todos os microservi√ßos funcionam independentemente via Docker"
